// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";


export class ExampleEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

    this.set("count", Value.fromBigInt(BigInt.zero()));
    this.set("user", Value.fromBytes(Bytes.empty()));
    this.set("pid", Value.fromBigInt(BigInt.zero()));

export class MasterChef extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save MasterChef entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save MasterChef entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("MasterChef", id.toString(), this);
  }

  static load(id: string): MasterChef | null {
    return store.get("MasterChef", id) as MasterChef | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get rewardsToken(): Bytes {
    let value = this.get("rewardsToken");
    return value.toBytes();
  }

  set rewardsToken(value: Bytes) {
    this.set("rewardsToken", Value.fromBytes(value));
  }

  get totalRewardsReceived(): BigInt {
    let value = this.get("totalRewardsReceived");
    return value.toBigInt();
  }

  set totalRewardsReceived(value: BigInt) {
    this.set("totalRewardsReceived", Value.fromBigInt(value));
  }

  get pools(): Array<string> {
    let value = this.get("pools");
    return value.toStringArray();
  }

  set pools(value: Array<string>) {
    this.set("pools", Value.fromStringArray(value));
  }

  get poolCount(): BigInt {
    let value = this.get("poolCount");
    return value.toBigInt();
  }

  set poolCount(value: BigInt) {
    this.set("poolCount", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class Pool extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));

  }

  save(): void {
    let id = this.get("id");

    assert(id != null, "Cannot save ExampleEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        "Cannot save ExampleEntity entity with non-string ID. " +
          'Considering using .toHex() to convert the "id" to a string.'
      );
      store.set("ExampleEntity", id.toString(), this);
    }
  }

  static load(id: string): ExampleEntity | null {
    return changetype<ExampleEntity | null>(store.get("ExampleEntity", id));

    assert(id !== null, "Cannot save Pool entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Pool entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Pool", id.toString(), this);
  }

  static load(id: string): Pool | null {
    return store.get("Pool", id) as Pool | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get lpSupply(): Bytes {
    let value = this.get("lpSupply");
    return value.toBytes();
  }

  set lpSupply(value: Bytes) {
    this.set("lpSupply", Value.fromBytes(value));
  }

  get tokenPerBlock(): BigInt {
    let value = this.get("tokenPerBlock");
    return value.toBigInt();
  }

  set tokenPerBlock(value: BigInt) {
    this.set("tokenPerBlock", Value.fromBigInt(value));
  }

  get lastRewardBlock(): BigInt {
    let value = this.get("lastRewardBlock");
    return value.toBigInt();
  }

  set lastRewardBlock(value: BigInt) {
    this.set("lastRewardBlock", Value.fromBigInt(value));
  }

  get endOfEpochBlock(): BigInt {
    let value = this.get("endOfEpochBlock");
    return value.toBigInt();
  }

  set endOfEpochBlock(value: BigInt) {
    this.set("endOfEpochBlock", Value.fromBigInt(value));
  }

  get accRewardsPerShare(): BigInt {
    let value = this.get("accRewardsPerShare");
    return value.toBigInt();
  }

  set accRewardsPerShare(value: BigInt) {
    this.set("accRewardsPerShare", Value.fromBigInt(value));
  }

  get users(): Array<string> {
    let value = this.get("users");
    return value.toStringArray();
  }

  set users(value: Array<string>) {
    this.set("users", Value.fromStringArray(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }

  get updatedAt(): BigInt {
    let value = this.get("updatedAt");
    return value.toBigInt();
  }

  set updatedAt(value: BigInt) {
    this.set("updatedAt", Value.fromBigInt(value));
  }
}

export class History extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save History entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save History entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("History", id.toString(), this);
  }

  static load(id: string): History | null {
    return store.get("History", id) as History | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get slpBalance(): BigDecimal {
    let value = this.get("slpBalance");
    return value.toBigDecimal();
  }

  set slpBalance(value: BigDecimal) {
    this.set("slpBalance", Value.fromBigDecimal(value));
  }

  get slpAge(): BigDecimal {
    let value = this.get("slpAge");
    return value.toBigDecimal();
  }

  set slpAge(value: BigDecimal) {
    this.set("slpAge", Value.fromBigDecimal(value));
  }

  get slpAgeRemoved(): BigDecimal {
    let value = this.get("slpAgeRemoved");
    return value.toBigDecimal();
  }

  set slpAgeRemoved(value: BigDecimal) {
    this.set("slpAgeRemoved", Value.fromBigDecimal(value));
  }

  get slpDeposited(): BigDecimal {
    let value = this.get("slpDeposited");
    return value.toBigDecimal();
  }

  set slpDeposited(value: BigDecimal) {
    this.set("slpDeposited", Value.fromBigDecimal(value));
  }

  get slpWithdrawn(): BigDecimal {
    let value = this.get("slpWithdrawn");
    return value.toBigDecimal();
  }

  set slpWithdrawn(value: BigDecimal) {
    this.set("slpWithdrawn", Value.fromBigDecimal(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class PoolHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PoolHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PoolHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PoolHistory", id.toString(), this);
  }

  static load(id: string): PoolHistory | null {
    return store.get("PoolHistory", id) as PoolHistory | null;

  }

  get id(): string {
    let value = this.get("id");

    return value!.toString();

  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }


  get count(): BigInt {
    let value = this.get("count");
    return value!.toBigInt();
  }

  set count(value: BigInt) {
    this.set("count", Value.fromBigInt(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    return value!.toBytes();
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get pid(): BigInt {
    let value = this.get("pid");
    return value!.toBigInt();
  }

  set pid(value: BigInt) {
    this.set("pid", Value.fromBigInt(value));

  get pool(): string {
    let value = this.get("pool");
    return value.toString();
  }

  set pool(value: string) {
    this.set("pool", Value.fromString(value));
  }

  get slpBalance(): BigDecimal {
    let value = this.get("slpBalance");
    return value.toBigDecimal();
  }

  set slpBalance(value: BigDecimal) {
    this.set("slpBalance", Value.fromBigDecimal(value));
  }

  get slpAge(): BigDecimal {
    let value = this.get("slpAge");
    return value.toBigDecimal();
  }

  set slpAge(value: BigDecimal) {
    this.set("slpAge", Value.fromBigDecimal(value));
  }

  get slpAgeRemoved(): BigDecimal {
    let value = this.get("slpAgeRemoved");
    return value.toBigDecimal();
  }

  set slpAgeRemoved(value: BigDecimal) {
    this.set("slpAgeRemoved", Value.fromBigDecimal(value));
  }

  get slpDeposited(): BigDecimal {
    let value = this.get("slpDeposited");
    return value.toBigDecimal();
  }

  set slpDeposited(value: BigDecimal) {
    this.set("slpDeposited", Value.fromBigDecimal(value));
  }

  get slpWithdrawn(): BigDecimal {
    let value = this.get("slpWithdrawn");
    return value.toBigDecimal();
  }

  set slpWithdrawn(value: BigDecimal) {
    this.set("slpWithdrawn", Value.fromBigDecimal(value));
  }

  get userCount(): BigInt {
    let value = this.get("userCount");
    return value.toBigInt();
  }

  set userCount(value: BigInt) {
    this.set("userCount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save User entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save User entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("User", id.toString(), this);
  }

  static load(id: string): User | null {
    return store.get("User", id) as User | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get pool(): string | null {
    let value = this.get("pool");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set pool(value: string | null) {
    if (value === null) {
      this.unset("pool");
    } else {
      this.set("pool", Value.fromString(value as string));
    }
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get rewardDebt(): BigInt {
    let value = this.get("rewardDebt");
    return value.toBigInt();
  }

  set rewardDebt(value: BigInt) {
    this.set("rewardDebt", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get block(): BigInt {
    let value = this.get("block");
    return value.toBigInt();
  }

  set block(value: BigInt) {
    this.set("block", Value.fromBigInt(value));

  }
}
